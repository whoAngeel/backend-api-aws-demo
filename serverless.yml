# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: manchilla
# "app" enables Serverless Framework Dashboard features and sharing them with other Services.
app: api-posts
# "service" is the name of this project. This will also be added to your AWS resource names.
service: backend-demo

provider:
    name: aws
    runtime: python3.12
    region: us-east-1
    iamRoleStatements:
        - Effect: Allow
          Action:
            - dynamodb:*
          Resource:
            - arn:aws:dynamodb:us-east-1:339713100819:table/task_table
        
        - Effect: Allow
          Action:
            - dynamodb:*
          Resource:
            - arn:aws:dynamodb:us-east-1:339713100819:table/user_table

functions:
    hello:
        handler: src/handler.hello
        events:
            - httpApi:
                  path: /
                  method: get
    create_task:
        handler: src/tasks/add_task.add_task
        events:
            - httpApi:
                path: /users/{userId}/tasks
                method: post
    get_tasks:
        handler: src/tasks/get_tasks.get_tasks
        events:
            - httpApi:
                path: /users/{userId}/tasks
                method: get
    get_task:
        handler: src/tasks/get_task.get_task
        events:
            - httpApi:
                path: /users/{userId}/tasks/{taskId}
                method: get
    delete_task:
        handler: src/tasks/delete_task.delete_task
        events:
            - httpApi:
                path: /users/{userId}/tasks/{taskId}
                method: delete
    toggle_task:
        handler: src/tasks/toggle_task.toggle_task
        events:
            - httpApi:
                path: /users/{userId}/tasks/{taskId}/toggle
                method: patch

    create_user:
        handler: src/users/add_user.add_user
        events:
            - httpApi:
                path: /users
                method: post
    get_users:
        handler: src/users/get_users.get_users
        events:
            - httpApi:
                path: /users
                method: get
    get_user:
        handler: src/users/get_user.get_user
        events:
            - httpApi:
                path: /users/{userId}
                method: get
    delete_user:
        handler: src/users/delete_user.delete_user
        events:
            - httpApi:
                path: /users/{userId}
                method: delete
    update_user:
        handler: src/users/update_user.update_user
        events:
            - httpApi:
                path: /users/{userId}/update
                method: patch

# HASH -> clave de particion, RANGE -> clave de ordenacion = clave compuesta
resources:
    Resources:
        TaskTable:
            Type: AWS::DynamoDB::Table
            Properties:
                TableName: task_table
                BillingMode: PAY_PER_REQUEST

                AttributeDefinitions:
                    - AttributeName: userId
                      AttributeType: S
                    - AttributeName: taskId
                      AttributeType: S
                KeySchema:
                    - AttributeName: userId
                      KeyType: HASH
                    - AttributeName: taskId
                      KeyType: RANGE
        UserTable:
            Type: AWS::DynamoDB::Table
            Properties:
                TableName: user_table
                BillingMode: PAY_PER_REQUEST

                AttributeDefinitions:
                    - AttributeName: userId
                      AttributeType: S
                KeySchema:
                    - AttributeName: userId
                      KeyType: HASH